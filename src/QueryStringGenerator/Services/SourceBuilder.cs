using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using QueryStringGenerator.Extensions;
using System.Linq;
using System.Text;

namespace QueryStringGenerator.Services
{
    internal class SourceBuilder
    {
        private readonly SourceParams _params = new();

        public SourceBuilder(ITypeSymbol typeSymbol)
        {
            _params.Namespace = typeSymbol.ContainingNamespace.ToString();
            _params.Modifiers = GetModifiers(typeSymbol.DeclaredAccessibility);
            _params.ClassName = typeSymbol.Name;
            _params.MethodName = typeSymbol.GetMethodName();
            _params.Properties = GetProperties(typeSymbol);
            _params.FileName = $"{typeSymbol.Name}.g.cs";
        }

        private string? GetProperties(ITypeSymbol typeSymbol)
        {
            // Generated extension method ToQueryString() can only access public properties
            var properties = typeSymbol.GetMembers().OfType<IPropertySymbol>().Where(ps => ps.DeclaredAccessibility == Accessibility.Public);

            var sb = new StringBuilder();

            foreach (var property in properties)
            {
                if (property.Type.IsValueType)
                {
                    if (property.NullableAnnotation != NullableAnnotation.Annotated)
                    {
                        // Currently only nullable value types are supported. If non-nullable types
                        // need to be supported, then need to clarify whether to include for example
                        // int=0 value to query string or not.
                        continue;
                    }

                    if (property.IsEnum())
                    {
                        sb.AppendLine(GetEnumType(property));
                    }
                    else
                    {
                        sb.AppendLine(GetValueType(property.Name));
                    }
                }
                else
                {
                    sb.AppendLine(GetReferenceType(property.Name));
                }
            }

            return sb.ToString();
        }

        /// <summary>
        /// Returns the class modifiers. Partial keyword is excluded due the fact that generated
        /// extension methods cannot be declared inside 'partial' classes. If no access modifier
        /// is specified returns 'internal'.
        /// </summary>
        private string GetModifiers(Accessibility declaredAccessibility)
        {
            return declaredAccessibility switch
            {
                Accessibility.Private => "private",
                Accessibility.Internal => "internal",
                Accessibility.Public => "public",
                _ => "internal"
            };
        }

        private string GetEnumType(IPropertySymbol declaredSymbol)
        {
            var text = declaredSymbol.Name;
            var type = ((INamedTypeSymbol)declaredSymbol.Type).TypeArguments.First();

            var sb = new StringBuilder();

            sb.AppendLine($@"
            if (_this.{text} != null)
            {{
                switch (_this.{text})
                {{");

            var members = type.GetMembers();
            foreach (var member in type.GetMembers().Where(m => m.Kind == SymbolKind.Field))
            {
                sb.AppendLine($@"                    case {member}:
                        sb.Append(""&{text.ToLower()}={char.ToLowerInvariant(member.Name[0])}{member.Name.Substring(1)}"");
                        break;
");
            }

            sb.Append($@"                    default:
                        throw new global::System.NotImplementedException();
                }}
            }}");

            return sb.ToString();
        }

        private string GetValueType(string text)
        {
            return $@"
            if (_this.{text} != null)
            {{
                sb.Append($""&{text.ToLower()}={{_this.{text}}}"");
            }}";
        }

        private string GetReferenceType(string text)
        {
            return $@"
            if (_this.{text} != null)
            {{
                sb.Append($""&{text.ToLower()}={{System.Net.WebUtility.UrlEncode(_this.{text})}}"");
            }}";
        }

        internal string GetFileName() => _params.FileName;

        internal string GetSource()
        {
            return $@"// <auto-generated />

namespace {_params.Namespace}
{{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(""QueryStringGenerator"", ""1.0.0"")]
    {_params.Modifiers} static class QueryStringExtensionFor{_params.ClassName}
    {{
        public static string {_params.MethodName}(this {_params.ClassName} _this)
        {{
            if (_this == null)
            {{
                return string.Empty;
            }}

            var sb = new global::System.Text.StringBuilder();
{_params.Properties}
            return sb.ToString();
        }}
    }}
}}
";
        }
    }
}
